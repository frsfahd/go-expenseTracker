// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/shopspring/decimal"
)

const addExpense = `-- name: AddExpense :one
INSERT INTO expenses (name, description, category, amount, user_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, description, category, amount, created_at, updated_at, user_id
`

type AddExpenseParams struct {
	Name        string
	Description string
	Category    string
	Amount      decimal.Decimal
	UserID      int32
}

func (q *Queries) AddExpense(ctx context.Context, arg AddExpenseParams) (Expense, error) {
	row := q.db.QueryRowContext(ctx, addExpense,
		arg.Name,
		arg.Description,
		arg.Category,
		arg.Amount,
		arg.UserID,
	)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const addUser = `-- name: AddUser :one
INSERT INTO users (email, password, username)
VALUES ($1, $2, $3)
RETURNING id, email, password, username
`

type AddUserParams struct {
	Email    string
	Password string
	Username string
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, addUser, arg.Email, arg.Password, arg.Username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Username,
	)
	return i, err
}

const deleteExpense = `-- name: DeleteExpense :one
DELETE FROM expenses
WHERE id = $1 AND user_id = $2
RETURNING id, name, description, category, amount, created_at, updated_at, user_id
`

type DeleteExpenseParams struct {
	ID     int32
	UserID int32
}

func (q *Queries) DeleteExpense(ctx context.Context, arg DeleteExpenseParams) (Expense, error) {
	row := q.db.QueryRowContext(ctx, deleteExpense, arg.ID, arg.UserID)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const filterExpense = `-- name: FilterExpense :many
SELECT id, name, description, category, amount, created_at, updated_at, user_id FROM expenses
WHERE user_id = $1 AND created_at >= NOW() - CAST($2 AS INTERVAL)
`

type FilterExpenseParams struct {
	UserID  int32
	Column2 string
}

func (q *Queries) FilterExpense(ctx context.Context, arg FilterExpenseParams) ([]Expense, error) {
	rows, err := q.db.QueryContext(ctx, filterExpense, arg.UserID, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Expense
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.Amount,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const filterExpenseCustom = `-- name: FilterExpenseCustom :many
SELECT id, name, description, category, amount, created_at, updated_at, user_id 
FROM expenses
WHERE user_id = $1 AND created_at BETWEEN $2 AND $3
`

type FilterExpenseCustomParams struct {
	UserID      int32
	CreatedAt   sql.NullTime
	CreatedAt_2 sql.NullTime
}

func (q *Queries) FilterExpenseCustom(ctx context.Context, arg FilterExpenseCustomParams) ([]Expense, error) {
	rows, err := q.db.QueryContext(ctx, filterExpenseCustom, arg.UserID, arg.CreatedAt, arg.CreatedAt_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Expense
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.Amount,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, email, password, username FROM users
WHERE email = $1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Username,
	)
	return i, err
}

const listExpenses = `-- name: ListExpenses :many
SELECT id, name, description, category, amount, created_at, updated_at, user_id FROM expenses
WHERE user_id = $1
`

func (q *Queries) ListExpenses(ctx context.Context, userID int32) ([]Expense, error) {
	rows, err := q.db.QueryContext(ctx, listExpenses, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Expense
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.Amount,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExpense = `-- name: UpdateExpense :one
UPDATE expenses
SET name = $1, description = $2, category = $3, amount = $4
WHERE id = $5 AND user_id = $6
RETURNING id, name, description, category, amount, created_at, updated_at, user_id
`

type UpdateExpenseParams struct {
	Name        string
	Description string
	Category    string
	Amount      decimal.Decimal
	ID          int32
	UserID      int32
}

func (q *Queries) UpdateExpense(ctx context.Context, arg UpdateExpenseParams) (Expense, error) {
	row := q.db.QueryRowContext(ctx, updateExpense,
		arg.Name,
		arg.Description,
		arg.Category,
		arg.Amount,
		arg.ID,
		arg.UserID,
	)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}
